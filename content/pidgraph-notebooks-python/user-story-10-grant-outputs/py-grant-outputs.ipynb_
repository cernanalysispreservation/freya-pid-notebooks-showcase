{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  [FREYA](https://www.project-freya.eu/en) WP2 [User Story 10](https://github.com/datacite/freya/issues/45) | As a funder, we want to be able to find all the outputs related to our awarded grants, including block grants such as doctoral training grants, for management info and looking at impact. \n",
    " :------------- | :------------- | :-------------\n",
    "\n",
    "Funders are interested in monitoring the output of grants they award - while the grant is active as well as retrospectively. The quality, quantity and types of the grant's outputs are useful proxies for the value obtained as a result of the funder's investment.<p />\n",
    "This notebook uses the [DataCite GraphQL API](https://api.datacite.org/graphql) to retrieve all outputs of [FREYA grant award](https://cordis.europa.eu/project/id/777523) from [European Union](https://doi.org/10.13039/501100000780) to date. \n",
    "\n",
    "**Goal**: By the end of this notebook you should be able to:\n",
    "- Retrieve all outputs of a grant award from a specific funder; \n",
    "- Plot number of outputs per year-quarter of the grant award duration;\n",
    "- Display de-duplicated outputs in tabular format, including the number of their citations, views and downloads;\n",
    "- Plot a pie chart of the number of outputs per resource type;\n",
    "- Display an interactive chord plot of co-authorship relationships across all outputs, e.g. <br> <img src=\"example_plot.png\" width=\"318\" height=\"309\" />\n",
    "- Plot a pie chart of the number of outputs per license type;\n",
    "- Plot an interactive stacked bar plot showing the proportion of outputs of each type issued under a given license type."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Install libraries and prepare GraphQL client"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "# Install required Python packages\n",
    "!pip install gql requests chord==0.0.17 numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prepare the GraphQL client\n",
    "import requests\n",
    "from IPython.display import display, Markdown\n",
    "from gql import gql, Client\n",
    "from gql.transport.requests import RequestsHTTPTransport\n",
    "\n",
    "_transport = RequestsHTTPTransport(\n",
    "    url='https://api.datacite.org/graphql',\n",
    "    use_json=True,\n",
    ")\n",
    "\n",
    "client = Client(\n",
    "    transport=_transport,\n",
    "    fetch_schema_from_transport=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define and run GraphQL query\n",
    "Define the GraphQL query to find all outputs of [FREYA grant award](https://cordis.europa.eu/project/id/777523) from [European Union](https://doi.org/10.13039/501100000780) to date."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate the GraphQL query: find all outputs of FREYA grant award (https://cordis.europa.eu/project/id/777523) from funder (EU) to date\n",
    "query_params = {\n",
    "    \"funderId\" : \"https://doi.org/10.13039/501100000780\",\n",
    "    \"funderAwardQuery\" : \"fundingReferences.awardNumber:777523\",\n",
    "    \"maxWorks\" : 200\n",
    "}\n",
    "\n",
    "query = gql(\"\"\"query getGrantOutputsForFunderAndAward($funderId: ID!, $funderAwardQuery: String!, $maxWorks: Int!)\n",
    "{\n",
    "funder(id: $funderId) {\n",
    "  name\n",
    "  works(query: $funderAwardQuery, first: $maxWorks) {\n",
    "      totalCount\n",
    "      nodes {\n",
    "        id\n",
    "        formattedCitation(style: \"vancouver\")\n",
    "        titles {\n",
    "          title\n",
    "        }\n",
    "        descriptions {\n",
    "          description\n",
    "        }        \n",
    "        types {\n",
    "          resourceType\n",
    "        }\n",
    "        dates {\n",
    "          date\n",
    "          dateType\n",
    "        }\n",
    "        versionOfCount\n",
    "        rights {\n",
    "          rights\n",
    "          rightsIdentifier\n",
    "          rightsUri\n",
    "        }        \n",
    "        creators {\n",
    "          id\n",
    "          name\n",
    "        }\n",
    "        fundingReferences {\n",
    "          funderIdentifier\n",
    "          funderName\n",
    "          awardNumber\n",
    "          awardTitle\n",
    "        }\n",
    "        citationCount\n",
    "        viewCount\n",
    "        downloadCount\n",
    "      }\n",
    "    }\n",
    "  }\n",
    "}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the above query via the GraphQL client"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "data = client.execute(query, variable_values=json.dumps(query_params))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Display total number of works \n",
    "Display the total number of [FREYA grant award](https://cordis.europa.eu/project/id/777523) outputs to date."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the total number of outputs to date\n",
    "funder = data['funder']['works']\n",
    "display(Markdown(str(funder['totalCount'])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot number of works per quarter\n",
    "Display a bar plot of number of [FREYA grant award](https://cordis.europa.eu/project/id/777523) outputs to date, per each quarter of project's duration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the number of FREYA outputs to date, by year\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import FormatStrFormatter\n",
    "import numpy as np\n",
    "\n",
    "# Return quarter (number) given month (number)\n",
    "def get_quarter(month):\n",
    "    return (month - 1) // 3 + 1\n",
    "\n",
    "# Return list of consecutive years between min_year_quarter and max_year_quarter inclusive\n",
    "def get_consecutive_year_quarters(min_year_quarter, max_year_quarter):\n",
    "    year_quarters = [\"%d Q%d\" % (min_year_quarter[0],min_year_quarter[1])]\n",
    "    yq = min_year_quarter\n",
    "    while yq != max_year_quarter:\n",
    "        year = yq[0]\n",
    "        quarter = yq[1]\n",
    "        if quarter == 4:\n",
    "            year += 1\n",
    "            quarter = 1\n",
    "        else:\n",
    "            quarter += 1\n",
    "        yq = (year, quarter)\n",
    "        year_quarters.append(\"%d Q%d\" % (year,quarter))\n",
    "    year_quarters.append(\"%d Q%d\" % (max_year_quarter[0],max_year_quarter[1])) \n",
    "    return year_quarters\n",
    "\n",
    "plt.rcdefaults()\n",
    "\n",
    "# Retrieve works counts by year-quarter from nodes\n",
    "# Pick out date of type: 'Issued'; failing that use 'Created' date.\n",
    "num_outputs_dict = {}\n",
    "funder = data['funder']['works']\n",
    "for r in funder['nodes']:\n",
    "    node_date = None\n",
    "    for date_dict in r['dates']:\n",
    "        ym = date_dict['date'].split('-')[0:2]\n",
    "        if len(ym) < 2:\n",
    "            continue\n",
    "        yq = ym[0] + \" Q\" + str(get_quarter(int(ym[1])))\n",
    "        if node_date is None:\n",
    "            if date_dict['dateType'] in ['Issued', 'Created']:\n",
    "                node_date = yq\n",
    "        else:\n",
    "            if date_dict['dateType'] in ['Issued']:\n",
    "                node_date = yq\n",
    "    if node_date:\n",
    "        if node_date not in num_outputs_dict:\n",
    "            num_outputs_dict[node_date] = 0\n",
    "        num_outputs_dict[node_date] += 1;\n",
    "    \n",
    "# Sort works counts by year-quarter in chronological order\n",
    "sorted_year_quarters = sorted(list(num_outputs_dict.keys()))\n",
    "# Get all consecutive year-quarters FREYA-specific start-end year-quarter\n",
    "year_quarters = get_consecutive_year_quarters((2017,4), (2020,4))       \n",
    "# Populate non-zero counts for year_quarters                          \n",
    "num_outputs = []\n",
    "for yq in year_quarters:\n",
    "    if yq in sorted_year_quarters:\n",
    "        num_outputs.append(num_outputs_dict[yq])\n",
    "    else:\n",
    "        num_outputs.append(0)\n",
    "        \n",
    "# Generate a plot of number of grant outputs by year - quarter\n",
    "fig, ax = plt.subplots(1, 1, figsize = (10, 5))\n",
    "x_pos = np.arange(len(year_quarters))\n",
    "ax.bar(x_pos, num_outputs, align='center', color='blue', edgecolor='black', linewidth = 0.1, alpha=0.5)\n",
    "ax.set_xticks(x_pos)\n",
    "ax.set_xticklabels(year_quarters, rotation='vertical')\n",
    "ax.set_ylabel('Number of outputs')\n",
    "ax.set_xlabel('Year Quarter')\n",
    "ax.set_title('Number of Grant Award Outputs per Year-Quarter')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Display de-duplicated works in tabular format\n",
    "Display the outputs of [FREYA grant award](https://cordis.europa.eu/project/id/777523) in a html table, including the number of their citations, views and downloads. Note that the outputs are de-duplicated, i.e. outputs that are versions of another output are excluded."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.core.display import display, HTML\n",
    "import textwrap\n",
    "xstr = lambda s: 'General' if s is None else str(s)\n",
    "\n",
    "# Get details for each output\n",
    "outputs = [['ID','Type','Publication Date','Formatted Citation','Descriptions', 'Number of Citations', 'Number of Views', 'Number of Downloads']]\n",
    "# Since there is scope for duplicates in Zenodo, versions of previously seen nodes are considered duplicates and stored in duplicate_versions so that \n",
    "# they can be excluded if seen later\n",
    "for r in funder['nodes']:\n",
    "    id = '<a href=\"%s\">%s</a></html>' % (r['id'], '/'.join(r['id'].split(\"/\")[3:]))\n",
    "    if r['versionOfCount'] > 0:\n",
    "        # If the current output is a version of another one, exclude it\n",
    "        continue\n",
    "    # As Publication Date, pick out date of type: 'Issued'; failing that use 'Created' date.\n",
    "    pub_date = None\n",
    "    for date_dict in r['dates']:\n",
    "        if pub_date is None:\n",
    "            if date_dict['dateType'] in ['Issued', 'Created']:\n",
    "                pub_date = date_dict['date'];\n",
    "        else:\n",
    "            if date_dict['dateType'] in ['Issued']:\n",
    "                pub_date = date_dict['date'];\n",
    "    \n",
    "    titles = '; '.join([s['title'] for s in r['titles']])\n",
    "    creators = '; '.join(['<a href=\"%s\">%s</a>' % (s['id'],s['name']) for s in r['creators']])\n",
    "    formatted_citation = \"%s. %s. %s; Available from: %s\" % (creators, titles, pub_date, id) \n",
    "    resource_type = xstr(r['types']['resourceType'])\n",
    "    descriptions = textwrap.shorten('; '.join([s['description'] for s in r['descriptions']]), width=200, placeholder=\"...\")\n",
    "    output = [id, resource_type, pub_date, formatted_citation, descriptions, str(r['citationCount']), str(r['viewCount']), str(r['downloadCount'])]\n",
    "    outputs += [output]\n",
    "    \n",
    "# Display outputs as html table \n",
    "html_table = '<html><table>'   \n",
    "html_table += '<tr><th style=\"text-align:center;\">' + '</th><th style=\"text-align:center;\">'.join(outputs[0]) + '</th></tr>'\n",
    "for row in outputs[1:]:\n",
    "    html_table += '<tr><td style=\"text-align:left;\">' + '</td><td style=\"text-align:left;\">'.join(row) + '</td></tr>'\n",
    "html_table += '</table></html>'\n",
    "display(HTML(html_table))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot number of outputs per resource type\n",
    "Plot as a pie chart the number of [FREYA grant award](https://cordis.europa.eu/project/id/777523) outputs per resource type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot as a pie chart the number of outputs per resource type\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import FormatStrFormatter\n",
    "import numpy as np\n",
    "import operator\n",
    "\n",
    "xstr = lambda s: 'General' if s is None else str(s)\n",
    "\n",
    "plt.rcdefaults()\n",
    "\n",
    "# Retrieve works counts by resource type from nodes\n",
    "# Pick out date of type: 'Issued'; failing that use 'Created' date.\n",
    "funder = data['funder']['works']\n",
    "num_outputs_dict = {}\n",
    "for r in funder['nodes']:\n",
    "    resource_type = xstr(r['types']['resourceType'])\n",
    "    if resource_type not in num_outputs_dict:\n",
    "        num_outputs_dict[resource_type] = 0\n",
    "    num_outputs_dict[resource_type] += 1;\n",
    "    \n",
    "# Sort resource types by count of work desc\n",
    "sorted_num_outputs = sorted(num_outputs_dict.items(),key=operator.itemgetter(1),reverse=True)\n",
    "# Populate lists needed for pie chart\n",
    "resource_types = [s[0] for s in sorted_num_outputs] \n",
    "num_outputs = [s[1] for s in sorted_num_outputs] \n",
    "\n",
    "# Generate a pie chart of number of grant outputs by resource type\n",
    "fig = plt.figure()\n",
    "ax = fig.add_axes([0,0,1,1])\n",
    "ax.set_title('Number of Grant Outputs per Resource Type')\n",
    "ax.axis('equal')\n",
    "ax.pie(num_outputs, labels = resource_types,autopct='%1.2f%%')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Display an interactive plot of co-authorship relationships across all outputs\n",
    "Display an interactive chord plot representing co-authorship relationships across all [FREYA grant award](https://cordis.europa.eu/project/id/777523) outputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a Chord plot representing co-authorship relationships across all grant award outputs\n",
    "from chord import Chord       \n",
    "from IPython.display import IFrame\n",
    "\n",
    "all_creator_names_by_node = []\n",
    "all_creator_names_set = set([])\n",
    "funder = data['funder']['works']\n",
    "for r in funder['nodes']:\n",
    "    if r['versionOfCount'] > 0:\n",
    "        # If the current output is a version of another one, exclude it\n",
    "        continue\n",
    "    # To minimise cropping of names in the below, retain just the first letter of the first name\n",
    "    # if the author name is well formatted     \n",
    "    creator_names = []\n",
    "    for name in [s['name'] for s in r['creators'] if s['name']]:\n",
    "        if name.find(\",\") > 0:\n",
    "            creator_names.append(name[0:name.index(\",\") + 3])\n",
    "        elif name.find(\",\") == 0:\n",
    "            creator_names.append(name[1:].strip())\n",
    "        else:\n",
    "            creator_names.append(name)\n",
    "    all_creator_names_by_node.append(creator_names)\n",
    "    all_creator_names_set.update(creator_names)\n",
    "    \n",
    "# Assemble data structures for the co-authorship chord diagram\n",
    "all_creator_names = sorted(list(all_creator_names_set))\n",
    "\n",
    "# Initialise chord data matrix\n",
    "length = len(all_creator_names)\n",
    "coauthorship_matrix = []\n",
    "for i in range(length):\n",
    "    r = []\n",
    "    for j in range(length):\n",
    "        r.append(0)\n",
    "    coauthorship_matrix.append(r)\n",
    "    \n",
    "# Populate chord data matrix\n",
    "for node_creators in all_creator_names_by_node:\n",
    "    for creator in node_creators:\n",
    "        c_pos = all_creator_names.index(creator)\n",
    "        for co_creator in node_creators:\n",
    "            co_pos = all_creator_names.index(co_creator)\n",
    "            if c_pos != co_pos:\n",
    "                coauthorship_matrix[c_pos][co_pos] += 1\n",
    "\n",
    "# display co-authorship cord diagram\n",
    "plot = Chord(coauthorship_matrix, all_creator_names, padding=0.04, wrap_labels=False, margin=130, width=1000).to_html()\n",
    "IFrame(src=\"./out.html\", width=1000, height=1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot number of outputs per license type\n",
    "Plot as a pie chart the number of [FREYA grant award](https://cordis.europa.eu/project/id/777523) outputs per license type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot as a pie chart the number of outputs per license type\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import FormatStrFormatter\n",
    "import numpy as np\n",
    "import operator\n",
    "\n",
    "xstr = lambda s: 'General' if s is None else str(s)\n",
    "xstr1 = lambda s: 'Not available' if s is None else str(s)\n",
    "\n",
    "plt.rcdefaults()\n",
    "\n",
    "# Retrieve works counts by resource type from nodes\n",
    "funder = data['funder']\n",
    "awardTitle = None\n",
    "\n",
    "right2NumOutputs = {}\n",
    "resourceType2NumOutputs = {}\n",
    "\n",
    "for r in funder['works']['nodes']:\n",
    "    resourceType = xstr(r['types']['resourceType'])\n",
    "    if r['versionOfCount'] > 0:\n",
    "        # If the current output is a version of another one, exclude it\n",
    "        continue\n",
    "    if not awardTitle:\n",
    "        awardTitle = r['fundingReferences'][0]['awardTitle'] \n",
    "    if resourceType not in resourceType2NumOutputs:\n",
    "        resourceType2NumOutputs[resourceType] = 0\n",
    "    resourceType2NumOutputs[resourceType] += 1\n",
    "    if not r['rights']:\n",
    "        r['rights'].append({'rights': 'Not available'})\n",
    "    for rights in r['rights']:\n",
    "        right = xstr1(rights['rights'])\n",
    "        if right not in right2NumOutputs:\n",
    "            right2NumOutputs[right] = 0\n",
    "        right2NumOutputs[right] += 1;\n",
    "    \n",
    "# Sort resource types by count of work desc\n",
    "sorted_num_outputs = sorted(right2NumOutputs.items(),key=operator.itemgetter(1),reverse=True)\n",
    "# Populate lists needed for pie chart\n",
    "resource_types = [s[0] for s in sorted_num_outputs] \n",
    "num_outputs = [s[1] for s in sorted_num_outputs] \n",
    "\n",
    "# Generate a pie chart of number of grant outputs by resource type\n",
    "fig = plt.figure()\n",
    "ax = fig.add_axes([0,0,1,1])\n",
    "ax.set_title('Number of Grant Outputs per License Type')\n",
    "ax.axis('equal')\n",
    "ax.pie(num_outputs, labels = resource_types,autopct='%1.2f%%')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot license type counts per resources type\n",
    "Plot stacked bar plot showing how <ins>each type</ins> of [FREYA grant award](https://cordis.europa.eu/project/id/777523) outputs contributes their license type counts to the corresponding aggregated total.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import plotly.io as pio\n",
    "import plotly.express as px\n",
    "from IPython.display import IFrame\n",
    "import pandas as pd\n",
    "from operator import itemgetter\n",
    "\n",
    "xstr = lambda s: 'General' if s is None else str(s)\n",
    "xstr1 = lambda s: 'Not available' if s is None else str(s)\n",
    "\n",
    "# Adapted from: https://stackoverflow.com/questions/58766305/is-there-any-way-to-implement-stacked-or-grouped-bar-charts-in-plotly-express\n",
    "def px_stacked_bar(df, color_name='License Type', y_name='Metrics', **pxargs):\n",
    "    idx_col = df.index.name\n",
    "    m = pd.melt(df.reset_index(), id_vars=idx_col, var_name=color_name, value_name=y_name)\n",
    "    # For Plotly colour sequences see: https://plotly.com/python/discrete-color/     \n",
    "    return px.bar(m, x=idx_col, y=y_name, color=color_name, **pxargs, \n",
    "                  color_discrete_sequence=px.colors.qualitative.Pastel1)\n",
    " \n",
    "# Collect metric counts\n",
    "funder = data['funder']\n",
    "funderName = funder['name']\n",
    "\n",
    "# Initialise dicts for the stacked bar plot\n",
    "labels = {0: 'All Output Types'}\n",
    "\n",
    "# Map each license type to a dict in turn mapping the position of the output's bar in plot \n",
    "# to the count of outputs corresponding to that license type\n",
    "licenseType2Pos2Count = {}\n",
    "\n",
    "# Collect output type labels and assign bar positions in plot\n",
    "outputType2Pos = {}\n",
    "pos = 1\n",
    "for outputType, num in sorted(resourceType2NumOutputs.items(), key = itemgetter(1), reverse = True):\n",
    "    labels[pos] = outputType\n",
    "    outputType2Pos[outputType] = pos\n",
    "    pos += 1\n",
    "    \n",
    "# Populate license type counts per output type (key = i) and add them to the aggregated counts (key: 0)\n",
    "for node in funder['works']['nodes']:\n",
    "    if node['versionOfCount'] > 0:\n",
    "        # If the current output is a version of another one, exclude it\n",
    "        continue       \n",
    "    resource_type = xstr(node['types']['resourceType'])\n",
    "    pos = outputType2Pos[resource_type]\n",
    "    if len(node['rights']) == 0:\n",
    "        node['rights'].append({'rights': 'Not available'})\n",
    "    for rights in node['rights']:\n",
    "        right = xstr1(rights['rights'])\n",
    "        if right not in licenseType2Pos2Count:\n",
    "            licenseType2Pos2Count[right] = {}\n",
    "            for pos1, _ in enumerate(labels):\n",
    "                # Initialise right's counts for each output type\n",
    "                licenseType2Pos2Count[right][pos1] = 0\n",
    "        licenseType2Pos2Count[right][0] += 1 \n",
    "        licenseType2Pos2Count[right][pos] += 1\n",
    "        \n",
    "# Create stacked bar plot\n",
    "x_name = \"Output Types (sorted by number of outputs)\"\n",
    "dfDict = {x_name: labels}\n",
    "\n",
    "for right in licenseType2Pos2Count:\n",
    "    dfDict[right] = licenseType2Pos2Count[right]\n",
    "\n",
    "df = pd.DataFrame(dfDict)\n",
    "fig = px_stacked_bar(df.set_index(x_name), y_name = \"Output Counts\")\n",
    "\n",
    "# Set plot background to transparent\n",
    "fig.update_layout({\n",
    "'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n",
    "'paper_bgcolor': 'rgba(0, 0, 0, 0)'\n",
    "})\n",
    "\n",
    "# Write interactive plot out to html file\n",
    "pio.write_html(fig, file='out1.html')\n",
    "\n",
    "# Display plot from the saved html file\n",
    "display(Markdown(\"License Types of %s's [FREYA grant award](https://cordis.europa.eu/project/id/777523) outputs, shown per output type as a stacked bar plot:\" % funderName))\n",
    "IFrame(src=\"./out1.html\", width=500, height=500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
